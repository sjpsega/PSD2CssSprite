/*<javascriptresource> <name>PSD2CssSprite</name> <menu>help</menu> <enableinfo>true</enableinfo> </javascriptresource>*/#include "vendor/underscore.js"app.bringToFront(); // Set Adobe Photoshop CS5 to use pixels and display no dialogsapp.displayDialogs = DialogModes.NO; // suppress all dialogsapp.preferences.rulerUnits = Units.PIXELS;app.preferences.typeUnits = TypeUnits.PIXELS;(function(){    var config = {        imgFormat:"jpg",        outputFolder:""    };    var NAME = 'csssprite';    var layerInfos = [];    var win = new Window('dialog{\                    text:"PSD2CssSprite",\                    option:Group{\                        orientation:"column",\                        alignChildren: "left",\                        imgFormat: Group{\                            alignChildren: "left",\                            t: StaticText{text:"Imgage Format"},\                            jpg: RadioButton{text:"jpg", value:true},\                            png8:RadioButton{text:"png-8"},\                            gif:RadioButton{text:"gif"}\                        },\                        imgQuality: Group{\                            alignChildren: "left",\                            t: StaticText{text:"Image Quality", helpTip:"Image quality"},\                            s: EditText{ text:"60", preferredSize: [50, 20] }\                        },\                        outputFolder: Group{\                            orientation:"row",\                            b: Button{text:"Output Folder", properties:{name:"open"}, helpTip:"Output Folder"},\                            s: StaticText  { text:"", preferredSize:[180, 20], helpTip:"defaultToMyDocument"}\                        }\                    },\                    buttons:Group{\                        ok: Button{text:"OK",  properties:{name:"ok"}},\                        cancel: Button{text:"cancel",  properties:{name:"cancel"}}\                    }\                }');    win.option.imgFormat.addEventListener('click', function(e){        var target = e.target,            imgQualityContainer = win.option.imgQuality;        imgQualityContainer.enabled=false;        switch(target.text){            case "jpg":                imgQualityContainer.enabled=true;                config.imgFormat = 'jpg';                break;            case "png-8":                config.imgFormat = 'png';                break;            case "gif":                config.imgFormat = 'gif';                break;        }    });    //选择路径    win.option.outputFolder.b.onClick = function(){        var output = Folder.selectDialog ('Output Folder');        if(output){            win.option.outputFolder.s.text = config.outputFolder = output.fsName;        }    };    //导出图片的格式    var exportImg = {        png: function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.PNG;            options.PNG8 = true;            return options;        },        jpg:function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.JPEG;            options.quality = win.option.imgQuality.s.text;            return options;        },        gif:function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.COMPUSERVEGIF;            return options;        }    };    win.buttons.ok.onClick = function(){        if(config.outputFolder === ''){            alert('请选择需要保存的路径');            return;        }        //若路径不存在，则新建        var folder = new Folder(config.outputFolder);        !folder.exists && folder.create();        layerInfos = [];        var activeDoc = app.activeDocument;        var savedState = activeDoc.activeHistoryState;        try{            //裁切，去除透明部分            activeDoc.trim(TrimType.TRANSPARENT);        }catch(e){        }        var visibleLayers = getVisibleLayers();        hideBackgroundLayer(visibleLayers);        var uncomformLayers = getUncomformLayer(visibleLayers);        if(uncomformLayers.length>0){            alert("图层名中含有空格，请修改后发布:"+uncomformLayers.join(","));            return;        }        // exportImgs();        dealWithAllLayer(visibleLayers);        if(layerInfos.length==0){            alert('PSD为空');            return;        }        saveImg();        saveCss();        saveStylus ();        saveHtml();                //恢复到最初状态        activeDoc.activeHistoryState = savedState;        win.close();    }    win.show();    function getVisibleLayers(){        var visibleLayers = [];        var activeDoc = app.activeDocument;        var layers = activeDoc.artLayers;        _.each(layers,function(layer){            if(layer.visible){                visibleLayers.push(layer);            }        });        return visibleLayers;    }    function getUncomformLayer(visibleLayers){        var array = [];        _.each(visibleLayers,function(layer){            if(layer.name.indexOf(" ")>-1){                array.push(layer.name);            }        });        return array;    }    //隐藏背景图层    function hideBackgroundLayer(visibleLayers){        _.each(visibleLayers,function(layer){            if(layer.isBackgroundLayer){                layer.visible=false;            }        })    }    function dealWithAllLayer(visibleLayers){        var activeDoc = app.activeDocument;        // var savedState = activeDoc.activeHistoryState;        // //裁切，去除透明部分        // activeDoc.trim(TrimType.TRANSPARENT);        // //删格化，可能会报错，导致无法继续        try{            activeDoc.rasterizeAllLayers();        }catch(e){        }        var docs = app.documents;        var layers = visibleLayers;        var tempLayer,tempBounds,left,top,width,height;        _.each(visibleLayers,function(layer){            if(layer.isBackgroundLayer){                return;            }            tempBounds = layer.bounds;            left = tempBounds[0].value;            top = tempBounds[1].value;            width = tempBounds[2].value-left;            height = tempBounds[3].value-top;            if(width>0 && height>0){                var layerName = layer.name;                var tempObj = {                                    name:layerName,                                    style:{                                        left:left,                                        top:top,                                        width:width,                                        height:height                                    }                                };                layerInfos.push(tempObj);            }        })    }    function saveImg(){        var activeDoc = app.activeDocument;        // var savedState = activeDoc.activeHistoryState;        //裁切，去除透明部分        // activeDoc.trim(TrimType.TRANSPARENT);        var filename = getFileAddress(getImgName ());        var imgFile = new File (filename);        var options = exportImg[config.imgFormat]();        activeDoc.exportDocument(imgFile, ExportType.SAVEFORWEB, options);        // doc.close(SaveOptions.DONOTSAVECHANGES);        // WaitForRedraw();        //恢复到最初状态        // activeDoc.activeHistoryState = savedState;    }    function saveCss(){        var cssArrays = getCssTxtArray();        var filename = getFileAddress(getCSSName());        saveFile(filename,cssArrays.join("\n"));    }    function saveStylus(){        var stylusArrays = [],tempStyle,left,top;        var tempArr = ["bg-sprite(){",                               "     background:url("+getImgName ()+") no-repeat;",                               "}"];        stylusArrays.push(tempArr.join("\n"));        var commonFun = tempArr.join("\n");        _.each(layerInfos,function(obj){            tempStyle = obj.style;            left = (tempStyle.left>0 ? -tempStyle.left: 0)+"px";            top = (tempStyle.top>0 ? -tempStyle.top: 0)+"px";            tempArr = ["."+obj.name+"{",                            "    bg-sprite();",                            "    background-position:"+left+" "+top+";",                            "    width:"+tempStyle.width+"px;",                            "    height:"+tempStyle.height+"px;",                            "}"];            stylusArrays.push(tempArr.join("\n"));         });        //$.writeln("stylus:",stylusArrays.join("\n"));        var filename = getFileAddress(NAME+".styl");        saveFile(filename,stylusArrays.join("\n"));    }        function getCssTxtArray(){        var cssArrays = [],tempArr = [],tempStyle = null,left,top;        _.each(layerInfos,function(obj){            tempStyle = obj.style;            left = (tempStyle.left>0 ? -tempStyle.left: 0)+"px";            top = (tempStyle.top>0 ? -tempStyle.top: 0)+"px";            tempArr = ["."+obj.name+"{",                            "    background:url("+getImgName ()+") no-repeat;",                            "    background-position:"+left+" "+top+";",                            "    width:"+tempStyle.width+"px;",                            "    height:"+tempStyle.height+"px;",                       "}"];            cssArrays.push(tempArr.join("\n"));        });        //$.writeln("css:",cssArrays.join("\n"));        return cssArrays;    }    function saveHtml(){        var filename = getFileAddress(NAME + ".html");        saveFile(filename,creatPage());    }    function saveFile(fileName, content, encoding){        if(!encoding){            encoding = "GBK";        }        var f = new File (fileName);        f.encoding = encoding;        f.open('w', 'HTML');        f.write(content);        f.close();    }    //生成html文档    function creatPage(){        var HTML_TEMPLATE =         '<!DOCTYPE html>\        <html>\          <head>\            <title>background-position</title>\            <meta charset="gbk"/>\            <link href="http://style.c.aliimg.com/fdevlib/css/fdev-v4/core/fdev-wide.css" rel="stylesheet"/>\            <link href="'+getCSSName()+'" rel="stylesheet"/>\            <style type="text/css">\                .layout{\                    padding: 10px;\                    margin: 5px 0;\                    background: #f7f7f7;\                    border-bottom: 1px solid #ddd;\                    vertical-align: middle;\                }\                .txt{\                    font-size:16px;\                    font-weight:bold;\                    vertical-align: middle;\                    width:500px;\                }\                .sprite-icon{\                    display:inline-block;\                }\            </style>\          </head>\          <body>\            <div id="doc" class="page-doc">\              <h1>Background Info</h1>\              <div class="screen">\                 <%= htmlStr %>\              </div>\            </div>\          </body>\        </html>';        var cssArrays = getCssTxtArray();        if(cssArrays.length!=layerInfos.length){            alert("发生错误，请重试!");            return;        }        var htmlStrArrays = [];        var layerInfoObj = null;        for (var i = 0; i <layerInfos.length; i++) {            layerInfoObj = layerInfos[i];            htmlStrArrays.push("<div class='layout'><span class='fd-left sprite-icon "+layerInfoObj.name+"'></span><pre class='fd-right txt'>"+cssArrays[i]+"</pre></div>");        };        var html = _.template(HTML_TEMPLATE,{htmlStr:htmlStrArrays.join("")});        return html;        }    function getFileAddress(name){        var link = (config.outputFolder.lastIndexOf("/") == 0) ? "" : "/";        return config.outputFolder+link+name;    }        function getCSSName(){        return NAME + ".css";    }        function getImgName(){        return NAME + "." + config.imgFormat;    }    // A helper function for debugging    // It also helps the user see what is going on    // if you turn it off for this example you    // get a flashing cursor for a number time    function WaitForRedraw()    {        var eventWait = charIDToTypeID("Wait")        var enumRedrawComplete = charIDToTypeID("RdCm")        var typeState = charIDToTypeID("Stte")        var keyState = charIDToTypeID("Stte")        var desc = new ActionDescriptor()        desc.putEnumerated(keyState, typeState, enumRedrawComplete)        executeAction(eventWait, desc, DialogModes.NO)    }})()