/*<javascriptresource> <name>PSD2CssSprite</name> <menu>help</menu> <enableinfo>true</enableinfo> </javascriptresource>*/#include "vendor/underscore.js"app.bringToFront(); // Set Adobe Photoshop CS5 to use pixels and display no dialogsapp.displayDialogs = DialogModes.NO; // suppress all dialogsapp.preferences.rulerUnits = Units.PIXELS;app.preferences.typeUnits = TypeUnits.PIXELS;(function(){    var config = {        imgFormat:"jpg",        outputFolder:""    };    var layerInfos = [];    var win = new Window('dialog{\                    text:"PSD2CssSprite",\                    option:Group{\                        orientation:"column",\                        alignChildren: "left",\                        imgFormat: Group{\                            alignChildren: "left",\                            t: StaticText{text:"Imgage Format"},\                            jpg: RadioButton{text:"jpg", value:true},\                            png8:RadioButton{text:"png-8"},\                            gif:RadioButton{text:"gif"}\                        },\                        imgQuality: Group{\                            alignChildren: "left",\                            t: StaticText{text:"Image Quality", helpTip:"Image quality"},\                            s: EditText{ text:"60", preferredSize: [50, 20] }\                        },\                        outputFolder: Group{\                            orientation:"row",\                            b: Button{text:"Output Folder", properties:{name:"open"}, helpTip:"Output Folder"},\                            s: EditText  { text:"", preferredSize:[180, 20], helpTip:"defaultToMyDocument"}\                        }\                    },\                    buttons:Group{\                        ok: Button{text:"OK",  properties:{name:"ok"}},\                        cancel: Button{text:"cancel",  properties:{name:"cancel"}}\                    }\                }');    win.option.imgFormat.addEventListener('click', function(e){        var target = e.target,            imgQualityContainer = win.option.imgQuality;        imgQualityContainer.enabled=false;        switch(target.text){            case "jpg":                imgQualityContainer.enabled=true;                config.imgFormat = 'jpg';                break;            case "png-8":                config.imgFormat = 'png';                break;            case "gif":                config.imgFormat = 'gif';                break;        }    });    //选择路径    win.option.outputFolder.b.onClick = function(){        var output = Folder.selectDialog ('Output Folder');        if(output){            win.option.outputFolder.s.text = config.outputFolder = output.fsName;        }    };    //导出图片的格式    var exportImg = {        png: function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.PNG;            options.PNG8 = true;            return options;        },        jpg:function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.JPEG;            options.quality = win.option.imgQuality.s.text;            return options;        },        gif:function(){            var options = new ExportOptionsSaveForWeb();            options.format = SaveDocumentType.COMPUSERVEGIF;            return options;        }    };    win.buttons.ok.onClick = function(){        if(config.outputFolder === ''){            alert('请选择需要保存的路径');            return;        }        layerInfos = [];        // exportImgs();        dealWithAllLayer();        if(layerInfos.length==0){            alert('PSD为空');            return;        }        //若路径不存在，则新建        var folder = new Folder(config.outputFolder);        !folder.exists && folder.create();        saveImg();        saveCss();        saveHtml();        win.close();    }    win.show();    function dealWithAllLayer(){        var activeDoc = app.activeDocument;        var savedState = activeDoc.activeHistoryState;        //删格化，可能会报错，导致无法继续        try{            activeDoc.rasterizeAllLayers();        }catch(e){        }        var docs = app.documents;        var layers = activeDoc.artLayers;        var tempLayer,tempBounds,left,top,width,height;;        for(var i = 0; i<layers.length;i++){            tempLayer = layers[i];            //隐藏背景图层            if(tempLayer.isBackgroundLayer){                tempLayer.visible=false;            }            if(tempLayer.visible && !tempLayer.isBackgroundLayer){                tempBounds = tempLayer.bounds;                left = tempBounds[0].value;                top = tempBounds[1].value;                width = tempBounds[2].value-left;                height = tempBounds[3].value-top;                if(width>0 && height>0){                    var layerName = tempLayer.name;                    var tempObj = {                                        name:layerName,                                        style:{                                            left:left,                                            top:top,                                            width:width,                                            height:height                                        }                                    };                    layerInfos.push(tempObj);                 }            }        }        //恢复到最初状态        activeDoc.activeHistoryState = savedState;    }    function saveImg(filename,doc){        var imgFile = new File (filename);        var options = exportImg[config.imgFormat]();        // doc.exportDocument(imgFile, ExportType.SAVEFORWEB, options);        // doc.close(SaveOptions.DONOTSAVECHANGES);        // WaitForRedraw();    }    function saveCss(){        var cssArrays = [],tempArr = [],tempStyle = null,left,top;        _.each(layerInfos,function(obj){            tempStyle = obj.style;            left = (tempStyle.left>0 ? -tempStyle.left: 0)+"px";            top = (tempStyle.top>0 ? -tempStyle.top: 0)+"px";            tempArr = [obj.name+"{",                            "background:url("+"aaa.png"+") no-repeat;",                            "background-position:"+left+" "+top,                            "width:"+tempStyle.width+"px;",                            "height:"+tempStyle.height+"px;",                       "}"];            cssArrays.push(tempArr.join("\n"));        });        $.writeln("css:"cssArrays.join("\n"));    }    function saveHtml(){    }    function saveFile(fileName, content, encoding){        if(encoding){encoding = "GBK"}        var f = new File (fileName);        f.encoding = encoding;        f.open('w', 'HTML');        f.write(content);        f.close();    }    //生成html文档    function creatPage(){        var HTML_TEMPLATE =         '<!DOCTYPE html>\        <html>\          <head>\            <title>background-position</title>\            <meta charset="gbk"/>\            <style type="text/css">\                <%- styleStr %>\            </style>\          </head>\          <body>\            <div id="doc" class="page-doc">\              <h1>Background Info</h1>\              <div class="line">image info: width:800 px; height:800 px;</div>\            </div>\          </body>\        </html>';        var html = _.template(HTML_TEMPLATE,{styleStr:"a{width:99px;}"});        return html;        }    // A helper function for debugging    // It also helps the user see what is going on    // if you turn it off for this example you    // get a flashing cursor for a number time    function WaitForRedraw()    {        var eventWait = charIDToTypeID("Wait")        var enumRedrawComplete = charIDToTypeID("RdCm")        var typeState = charIDToTypeID("Stte")        var keyState = charIDToTypeID("Stte")        var desc = new ActionDescriptor()        desc.putEnumerated(keyState, typeState, enumRedrawComplete)        executeAction(eventWait, desc, DialogModes.NO)    }})()